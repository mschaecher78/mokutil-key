#!/bin/bash

# mokutil-key home <https://www.github.com/mschaecher78/mokutil-key/>
# Copyright (C) 2020 <Michael L. Schaecher> GPL v2

set -e

version="version 0.2.1"		# Version.

mok_dir="/home/$(users)/.mok"	# Default directory.
option="${1}"			# What option am I.

# Hendle the key generation option differently.
if [ "${option}" == "-g" ] || [ "${option}" == "--generate-keys" ] ; then

	if [ ! "${2}" ] ; then config="${mok_dir}/openssl.cnf" ; else config="${2}" ; fi
	if [ ! "${3}" ] ; then rsa="2048" ; else rsa="${3}" ; fi
	if [ ! "${4}" ] ; then name="${mok_dir}/MOK" ; else name="${mok_dir}/${4}" ; fi

else
	priv="${2}" && key="${3}" && path="${4}"

	# FIXME: I need to find better workout for key verification.
	private=$(echo ${2} | awk -F'.priv' '{print $1}')
	signingder=$(echo ${key} | awk -F'.der' '{print $1}')
	signingpem=$(echo ${key} | awk -F'.pem' '{print $1}')

fi

# Display help info.
usage () {

	echo "Mokutil-Key, ${version}
Usage: mokutil-key [option]
       mokutil-key [option] priv pub ...

    options

    -c --configure               Configure openssl.cnf file.
    -g --generate-keys           Create key pair for signing (see man page
                                 for more info).
    -m --module                  Sign single kernel module, useful for nVidia
                                 kernel drive module.
    -a --module-all              Signs all modules /lib/modules/(kernel version).
    -i --image                   Sign kernel or grub binary file.
    -r --register-key            Register key into shim with mokutil.


mokutil-key home <https://www.github.com/mschaecher78/mokutil-key/>
Copyright (C) 2020 <Michael L. Schaecher> GPL v2
"
}

# Create the configure file.
create_openssl () {

exec sudo cat <<EOF > ~/.mok/openssl.cnf
# This definition stops the following lines choking if HOME isn't
# defined.
HOME                    = .
#RANDFILE                = $ENV::HOME/.rnd

[ req ]
distinguished_name      = req_distinguished_name
x509_extensions         = v3
string_mask             = utf8only
prompt                  = no

[ req_distinguished_name ]
countryName             = ${country}
stateOrProvinceName     = ${province}
localityName            = ${city}
0.organizationName      = ${organization}
commonName              = ${common}
emailAddress            = ${email}

[ v3 ]
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always,issuer
basicConstraints        = critical,CA:FALSE
extendedKeyUsage        = codeSigning,1.3.6.1.4.1.311.10.3.6,1.3.6.1.4.1.2312.16.1.2
nsComment               = "OpenSSL Generated Certificate"
EOF
}

detect_keys () {

	# Make sure that the key are in fact keys and require that the
	# suffix is proper.

	# TODO: Add default/create keys to be used with having to enter then.
	if [ "${priv}" == "${private}.priv" ] ; then
		echo "Private Key: ${priv}" && sleep 0.5
	else
		echo "Error: with ${priv}" && exit 1
	fi

	if [ "${option}" == "-i" ] || [ "${option}" == "--image" ] ; then

		if [ "${key}" == "${signingpem}.pem" ] ; then
			echo "Private Key: ${key}" && sleep 0.5
		else
			echo "Error: with ${key}" && exit 1
		fi

	else

		if [ "${key}" == "${signingder}.der" ] ; then
			echo "Private Key: ${key}" && sleep 0.5
		else
			echo "Error: with ${key}" && exit 1
		fi

	fi

}

# Root should not be required for help option, but is need for
# everything else.
if [ ! "${EUID}" == 0 ] ; then

	if [ "${option}" == "-h" ] || [ "${option}" == "--help" ] ; then
		usage
	else
		echo "mokutil-key requires root access!"
		exit 1
	fi

elif [ ! "${EUID}" == 1 ] ; then

	# Locate the '.mok' directory.
	if [ ! -d ${mok_dir} ] ; then exec sudo mkdir -p ${mok_dir} ; fi

	case ${1} in

		-c|--configure)

			# Require base infomation.
			echo -n "Country Code (i.e. United States = US): " && read country
			echo -n "State/Province: " && read province
			echo -n "City: " && read city
			echo -n "Organization Name (default = blank): " && read organization
			echo -n "Common Name (default = Signing Key) " && read common
			echo -n "Email (default = blank): " && read email

			# Use default/'s if left empty or "none."
			if [ "${organization}" == "" ] ; then organization="" ; fi
			if [ "${common}" == "" ] ; then common="Signing Key" ; fi
			if [ "${email}" == "" ] ; then email="" ; fi

			# If creating the config file fails.
			if ! create_openssl ; then echo "Error: unable to create ${config}" ; fi

		;;

		-m|--sign-module)

			detect_keys

			# Make sure the module is actually a kernel .ko file
			# and exit with error if it is not.
			module=$(echo ${path} | awk -F'.ko' '{print $1}')

			if [ "${path}" == "${module}.ko" ] ; then

				if ! exec sudo kmodsign sha512 ${priv} ${key} ${path} 2> /dev/null ; then
					echo "Error: unable to sign ${4}!" && exit 1
				else
					echo "signed: ${path}"	# Give feedback
				fi

			else
				echo "ERROR! ${path} is not a kernel module" && exit 1
			fi
		;;

		-M|--sign-module-all)

			detect_keys

			# Find all modules to be signed, if none is found the exit
			# with an error.
			for modules in $(find ${path}/ -name "*.ko" -printf '%P\n' 2> /dev/null); do

				if [ ! -f ${path}/${modules} ] ; then
					echo "Error: ${modoles}, no such module!"
					exit 1
				else
					# This should be fail.
					if ! exec sudo kmodsign sha512 ${priv} ${key} ${path}/${modules} 2> /dev/null ; then
						echo "Error: unable to sign ${path}!"
						exit 1
					else
						echo "signed: ${path}/${modules}"	# Give feedback.
					fi

				fi

			done
		;;

		-i|--image)

			detect_keys

			# Give feedback if the signing of the binary image fails.
			if ! exec sudo sbsign --key ${priv} --cert ${key} ${path} --output ${path}.signed ; then
				echo "Error: unable to sign ${path}"
				exit 1
			else
				if ! mv -f ${path}.signed ${path} ; then
					echo "Error: rename ${ptah}.signed"
					exit 1
				else
					echo "Signed: ${ptah}"	# Give feedback.
				fi

			fi
		;;

		-g|--generate-keys)

			# Need to generate the priv and der keys frist.
			create_priv_der=$(exec sudo openssl req -config ${config} \
			-new -x509 -newkey rsa:${rsa} -nodes -days 36500 -outform DER \
			-keyout "${name}.priv" -out "${name}.der" 2> /dev/null)

			# This is needed to sign efi binary images.
			create_pem=$(exec sudo openssl x509 -in ${name}.der \
			-inform DER -outform PEM -out ${name}.pem 2> /dev/null)

			# There no such thing as to much feedback.
			if ! ${create_priv_der} ; then
				echo "Error: unable to create ${name}.priv & ${name}.der keys!"
				exit 1
			else

				if ! ${create_pem} ; then
					echo "Error: unable to create ${name}.pem key!"
					exit 1
				else
					ls ${mok_dir}
				fi

			fi

		;;

		-r|--register-key)

			detect_keys

			# Give instruction and what to do if regisation is seccesful.
			if ! exec sudo sudo mokutil --import ${key} ; then
				echo "Error: unable to register ${key} into mok"
			else
				echo -e "Key: ${key} registed into mok\nreboot and fallow mok regisation process."
			if

		;;

		*)
			echo "mokutil-key: unreconized option" && exit 1
		;;
	esac
fi

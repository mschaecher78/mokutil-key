#!/bin/bash

# mokutil-key home <https://www.github.com/mschaecher78/mokutil-key/>
# Copyright (C) 2020 <Michael L. Schaecher> GPL v2

set -e


# Display these helpful options.
USAGE="mokutil-key ${VERSION} (mokutil)
Usage: mokutil-key [Options]
       mokutil-key [options]=arg [key options]=arg ...

Options:
    -a,   --modules-all                  Sign all kernel mdoules.
    -m,   --module                       Sign single kernel module.
    -i,   --image                        Sign kernel/bootload binary image.
    -c,   --configure                    Configure openssl.cnf file used be openssl to create private/public key pair.
    -g,   --generate-keys                Create key pairs, when used with --set-rsa and --use-file-name for custom key
                                         size and name.
    -r,   --register-key                 Registers the key into MOK (Machine Owner Key) Management.
    -h,   --help                         displays these helpful options.
    -v,   --version                      Display mokutil-key version number.

Key Options:
          --key-private=PRIVATE_KEY      Set the pirvate key to use to for sign file/image.
          --key-public=PUBLIC_KEY        Set corresponding public key. If these options are omitted then then the default
                                         keys generated with mokutil-key will be used.

Optional:
    -n,   --file-name=NAME           file name for the keys, default is MOK if option is omitted.
    -s,   --rsa-size=SIZE            Set the bit size of the the key pair between 2048 - 16384. The default size is
                                         2048 bits.
          --openssl-config=FILE          Use different configuration file to generate the keys.

mokutil-key home <https://www.github.com/mschaecher78/mokutil-key/>
Copyright (C) 2020 <Michael L. Schaecher> GPL v2"

# Set the variables even if the command is not being use, this well
# help to make the script consistent.
export DIR="/home/$(users)/.mok"
export DER="${DIR}/MOK.der"
export PEM="${DIR}/MOK.pem"
export PRIVATE="${DIR}/MOK.priv"
export SIZE="2048"
export EXPIRE="36500"

# Figure out which config to set as the default.
if [ ! -f ${DIR}/openssl.cnf ] ; then
	export CONFIG="/usr/lib/mokuntil-key/mokuntil-key.conf"
else
	export CONFIG="${DIR}/openssl.cnf"
fi

# getopt
GETOPT=$(getopt -n mokutil-key -o 'c,g,r,h,v,i:,a:,m:,n:,s:' -l 'configure,generate-keys,register-key,help,version,' \
	-l 'modules-all:,module:,image:,key-private:,key-public:,file-name:,rsa-size:,openssl-config:expire:' \
	-- $@)

eval set -- "${GETOPT}"

# Root access is required for most options.
if [ ! "${EUID}" == "0" ] ; then

	# Check if the help/version option is used and if so exit cleanly
	if [ "${1}" == "--help" ] || [ "${1}" == "-h" ] ; then
		echo "${USAGE}"
		exit 0
	elif [ "${1}" == "--version" ] || [ "${1}" == "-v" ]; then
		echo "mokutil-key: ${VERSION}"
		exit 0
	else
		echo "mokutil-key requires root access"
		exit 1
	fi

elif [ ! "${EUID}" == "1" ] ; then

	# If the directory doesn't exist, then create it.
	if [ ! -d ${DIR} ] ; then
		mkdir -p ${DIR}
	fi

	while true  ; do

		case "${1}" in

			# Options
			-a|--modules-all) command="modall"
				MODULES=$(echo ${2} | awk -F'=' '{print $1}')
				command="modall" && shift
			;;
			-m|--module)
				MODULE=$(echo ${2} | awk -F'=' '{print $1}')
				command="modone" && shift
			;;
			-i|--image)
				IMAGE=$(echo ${2} | awk -F'=' '{print $1}')
				command="binary" && shift
			;;
			-c|--configure) command="config" ;;
			-g|--generate-keys) command="genkey" ;;
			-r|--register-key) command="regkey" ;;
			# Just in case root was used.
			-h|--help) echo "${USAGE}" ;;
			-v|--version) echo "mokutil-key: ${VERSION}" ;;
			# Key Options
			--key-private)
				export PRIVATE=$(echo ${2} | awk -F'=' '{print $1}')

				# Assume that the file is the private key. If it is
				# not then sign fo file well fail.

				# Only test for file existents.
				if [ ! -f ${PRIVATE} ] ; then
					echo "Error: ${PRIVATE} does not seem to exist!"
					exit 1
				fi

				shift
			;;
			--key-public)
				export PUBLIC=$(echo ${2} | awk -F'=' '{print $1}')

				# Only test for file existants.
				if [ ! -f ${PUBLIC} ] ; then
					echo "Error: ${PUBLIC} does not seem to exist!"
					exit 1
				fi

				shift
			;;
			# These options are optional.
			-n|--file-name)
				export NAME=$(echo ${2} | awk -F'=' '{print $1}')
				shift
			;;
			-s|--rsa-size)
				export SIZE=$(echo ${2} | awk -F'=' '{print $1}')

				if [[ ${SIZE} =~ [a-zA-Z] ]] ; then
					echo "Error: '${SIZE}' not a valid integer"
					exit 1
				elif [[ ${SIZE} =~ [1-9] ]] ; then

					if [ "${SIZE}" -lt "2048" ] || [ "${SIZE}" -gt "16384" ]; then
						echo "Error: '${SIZE}' invalid RSA size (2048 - 16384)!"
						exit 1
					fi

				fi

				shift
			;;
			-x|--expire)
				export EXPIRE=$(echo ${2} | awk -F'=' '{print $1}')

				if [[ ${EXPIRE} =~ [a-zA-Z] ]] ; then
					echo "Error: '${EXPIRE}' not a valid integer"
					exit 1
				elif [[ ${EXPIRE} =~ [1-9] ]] ; then

					if [ "${EXPIRE}" -lt "365" ] ; then
						echo "Warning: '${EXPIRE}' less a year is not recommended!"
						sleep 2
					fi

				fi

				shift
			;;
			--openssl-config)
				export CONFIG=$(echo ${2} | awk -F'=' '{print $2}')
				shift
			;;
			--) shift ; break ;;
		esac
		shift

	done
fi



# Which command options was give.
if [ "${command}" == "genkey" ] ; then

	# Use condistion for command.
	if ! openssl req -config ${CONFIG} -new \
	-x509 -newkey rsa:2048 -nodes -days ${EXPIRE} \
	-outform DER -keyout "${NAME}.priv" -out \
	"${NAME}.der" 2> /dev/null ; then
		echo "Error: unable to creating ${NAME}.priv key"
		echo "Error; unable to creating ${NAME}.der key"
		exit 1
	else
		echo "Created:  ${NAME}.priv"
		echo "Created:  ${NAME}.der"

		if ! openssl x509 -in ${NAME}.der -inform DER \
		-outform PEM -out ${NAME}.pem 2> /dev/null ; then
			echo "Error; unable to creating ${NAME}.pem key"
			exit 1
		else
			echo "Created:  ${NAME}.pem"

		fi

	fi

elif [ "${command}" == "modone" ] || [ "${command}" == "modall" ] ; then

	if [ ! "${PUBLIC}" ] ; then
		export PUBLIC=${DER}
	fi

	# Which command option for module signing was used
	if [ "${command}" == "modone" ] ; then

		echo "${PRIVATE} ${PUBLIC} ${MODULES}"

		if [ ! -d ${MODULE} ] ; then
			echo "Error: directory ${MODULE} does not exist."
			exit 1
		else

			# Sign that sigle module.
			if ! kmodsign sha512 ${PRIVATE} ${PUBLIC} ${MODULE} 2> /dev/null ; then
				echo "Error: signing ${DIR_PATH} failed!"
				exit 1
			else
				echo "Signed: ${DIR_PATH}"
			fi

		fi

	elif [ "${command}" == "modall" ] ; then

		if [ -d ${MODULES} ] ; then

			for modules in $(find ${MODULES}/ -name *.ko -printf '%P\n') ; do

				# Sign every module.
				if ! kmodsign sha512 ${PRIVATE} ${PUBLIC} ${MODULES}/${modules} 2> /dev/null ; then
					echo "Error: signing ${MODULES} failed!"
					exit 1
				else
					echo "Signed: ${MODULES}/${modules}"
				fi

			done

		fi

	fi

elif [ "${command}" == "binary" ] ; then

	# Only if key-public is used.
	if [ ${PUBLIC} ] ; then PEM="${PUBLIC}" ; fi

	# Verify that the right public key is used. Exit with error if
	# the key is not.
	if [ "$(ls ${PEM} | awk -F'.' '{print $3}')" == "pem" ] ; then

		# Sign the binary image,
		if ! sbsign --key ${PRIVATE} --cert ${PEM} ${IMAGE} \
		--output ${IMAGE}.signed 2> /dev/null ; then
			echo "Error: failed signing ${IMAGE}"
			exit 1
		else
			mv -f ${IMAGE}.signed ${IMAGE}
			echo "Signed: ${IMAGE}"
		fi
	else
		echo "Error: ${PEM} is not pem"
		exit 1
	fi

elif [ "${command}" == "regkey" ] ; then

	if [ ! "${PUBLIC}" ] ; then
		export PUBLIC=${PUBLIC_DER}
	fi

	if ! mokutil --import ${PUBLIC} ; then
		echo "Error: Failed to register ${PUBLIC} in MOK!"
	fi

elif [ "${command}" == "config" ] ; then

	read -p "Country Code (i.e. United States = US): " COUNTRY
	read -p "State/Province Name: " PROVINCE
	read -p "locality/City Name: " LOCALITY
	read -p "Organization Name (default = ): " ORGANIZATION
	read -p "Common Name (default Signing Key): " COMMON
	read -p "Email (default = $(users)@$(hostname)): " EMAIL

	if [ ! "${ORGANIZATION}" ] || [ "${ORGANIZATION}" == "none" ] ; then
		ORGANIZATION="none"
	fi

	if [ ! "${COMMON}" ] || [ "${COMMON}" == " Signing Key" ] ; then
		COMMON="Signing Key"
	fi

	if [ ! "${EMAIL}" ] || [ "${EMAIL}" == "none" ] ; then
		EMAIL="$(hostname)@$(users)"
	fi

# Default openssl.cnf for mokutil-key.
cat <<EOF > ${DIR}/openssl.cnf
# This definition stops the following lines choking if HOME isn't
# defined.
HOME                    = .
RANDFILE                = \$ENV::HOME/.rnd

[ req ]
distinguished_name      = req_distinguished_name
x509_extensions         = v3
string_mask             = utf8only
prompt                  = no

[ req_distinguished_name ]
countryName             = ${COUNTRY}
stateOrProvinceName     = ${PROVINCE}
localityName            = ${LOCALITY}
0.organizationName      = ${ORGANIZATION}
commonName              = ${COMMON}
emailAddress            = ${EMAIL}

[ v3 ]
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always,issuer
basicConstraints        = critical,CA:FALSE
extendedKeyUsage        = codeSigning,1.3.6.1.4.1.311.10.3.6,1.3.6.1.4.1.2312.16.1.2
nsComment               = "OpenSSL Generated Certificate"
EOF

fi

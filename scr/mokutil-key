#!/bin/bash

# mokutil-key home <https://www.github.com/mschaecher78/mokutil-key/>
# Copyright (C) 2020 <Michael L. Schaecher> GPL v2

set -e

DIR="/home/$(users)/.mok"	# Default directory is required.

VERSION=" version 1.0.1"	# Version

# Display this helpful options.
USAGE="mokutil-key ${VERSION} (mokutil)
Usage: mokutil-key [Options]
       mokutil-key [options] [key options]=arg ... [path options]=arg

Options:
    -a,   --modules-all                  Sign all kernel mdoules.
    -m,   --module                       Sign single kernel module.
    -i,   --image                        Sign kernel/bootload binary image.
    -c,   --configure                    Configure openssl.cnf file used be openssl to create private/public key pair.
    -g,   --generate-keys                Create key pairs, when used with --set-rsa and --use-file-name for custom key
                                         size and name.
    -r,   --register-key                 Registers the key into MOK (Machine Owner Key) Management.
          --help                         displays these helpful options.
          --version                      Display mokutil-key version number.

Key Options:
          --key-private=PATH/KEY         Set the pirvate key to use to for sign file/image.
          --key-public=PATH/KEY          Set corresponding public key. If these options are omitted then then the default
                                         keys generated with mokutil-key will be used.

Directory/Path Options:
          --path=PATH/VERSION            This option is used for the path the the lib/module/\"kernel version\" path.
          --object-ko=PATH/*             Used for single kernel module.
          --binary-image=PATH/*          Used for binary image such as vmlinux-(version) or /boot/efi/image.

Optional:
    -n,   --use-file-name=NAME           file name for the keys (default file name is MOK).
    -s,   --set-rsa-szie=SIZE            Set the bit size of the the key pair between 2048 - 16384. The default size is
                                         2048 bits.
          --openssl-config=FILE          Use different configuration file to generate the keys.

mokutil-key home <https://www.github.com/mschaecher78/mokutil-key/>
Copyright (C) 2020 <Michael L. Schaecher> GPL v2"

function all_modules () {

	echo "${PRIV}"
	echo "${PUBL}"

}

function config_openssl () {

	read -p "Country Code (i.e. United States = US): " COUNTRY
	read -p "State/Province Name: " PROVINCE
	read -p "locality/City Name: " LOCALITY
	read -p "Organization Name (default = ): " ORGANIZATION
	read -p "Common Name (default Signing Key): " COMMON
	read -p "Email (default = $(users)@$(hostname)): " EMAIL

	if [ ! "${ORGANIZATION}" ] || [ "${ORGANIZATION}" == "none" ] ; then
		ORGANIZATION="none"
	fi

	if [ ! "${COMMON}" ] || [ "${COMMON}" == " Signing Key" ] ; then
		COMMON="Signing Key"
	fi

	if [ ! "${EMAIL}" ] || [ "${EMAIL}" == "none" ] ; then
		EMAIL="$(hostname)@$(users)"
	fi

# Default openssl.cnf for mokutil-key.
cat <<EOF > ${DIR}/openssl.cnf
# This definition stops the following lines choking if HOME isn't
# defined.
HOME                    = .
RANDFILE                = \$ENV::HOME/.rnd

[ req ]
distinguished_name      = req_distinguished_name
x509_extensions         = v3
string_mask             = utf8only
prompt                  = no

[ req_distinguished_name ]
countryName             = ${COUNTRY}
stateOrProvinceName     = ${PROVINCE}
localityName            = ${LOCALITY}
0.organizationName      = ${ORGANIZATION}
commonName              = ${COMMON}
emailAddress            = ${EMAIL}

[ v3 ]
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always,issuer
basicConstraints        = critical,CA:FALSE
extendedKeyUsage        = codeSigning,1.3.6.1.4.1.311.10.3.6,1.3.6.1.4.1.2312.16.1.2
nsComment               = "OpenSSL Generated Certificate"
EOF

}

function create_keys () {

	echo "${NAME}"
	echo "${SIZE}"

}

function test_public_key () {

	openssl pkey -inform PEM -pubin -in ${PUBLIC} -noout &> /dev/null

	if [ $? != 0 ] ; then
		echo "${PUBLIC}"
		echo "this was definitely not a RSA public key in PEM format"
		exit 1
	fi

}

# getopt
GETOPT=$(getopt -n mokutil-key -o 'a,m,i,c,g,r,n:,s:' \
	-l 'modules-all,module,image,configure,generate-keys' \
	-l 'register-key,help,version,key-private:,key-public:' \
	-l 'path:,--use-file-name:,set-rsa-size:,openssl-config:' \
	-- $@)

eval set -- "${GETOPT}"

# Root access is required for most options.
if [ ! "${EUID}" == "0" ] ; then

	# Check if the help option is used.
	if [ "${1}" == "--help" ] ; then
		echo "${USAGE}"
	elif [ "${1}" == "--version" ] ; then
		version
	else
		echo "mokutil-key requires root access"
		exit 1
	fi

elif [ ! "${EUID}" == "1" ] ; then

	while true  ; do

		case "${1}" in

			# Options
			-a|--module-all) command="modall" ;;
			-m|--module) command="modone" ;;
			-i|--image) command="binary" ;;
			-c|--configure) config_openssl ;;
			-g|--generate-keys) command="genkey" ;;
			-r|--register-key) command="regkey" ;;
			--help)	;;
			--version) ;;

			# Key Options
			--key-private) export PRIVATE=${2} ; shift ;;
			--key-public) export PUBLIC=${2} ; shift ;;
			--path) export PATH=${2} ; shift ;;

			# These options are optional.
			-n|--use-file-name) ;;
			-s|--set-rsa-size) ;;
			--openssl-config) ;;
			--) shift ; break ;;
		esac
		shift

	done
fi

# Do this.
if [ "${command}" == "modall" ] || [ "${command}" == "modone" ] ; then

	# Grab the private key if none was given or the file
	# is not valid and do the same for the public key.
	if [ ! "${PRIVATE}" ] || [ ! -f ${PRIVATE} ] ; then

		export PRIVATE="${DIR}/`ls ${DIR} | grep .priv`"

		# Test for existing default key
		if [ ! -f ${PRIVATE} ] ; then
			PRIVATE_KEY_ERROR="Error: unable to load ${PRIVATE}"
		fi

	fi

	if [ ! "${PUBLIC}" ] || [ ! -f ${PUBLIC} ] ; then

		export PUBLIC="${DIR}/`ls ${DIR} | grep .der`"

		# Test for existing default key
		if [ ! -f ${PUBLIC} ] ; then
			PUBLIC_KEY_ERROR="Error: unable to load ${PRIVATE}"
		fi

		# Test the key
		test_public_key

	fi

	if ! diff `ssh-keygen -y -f ${PUBLIC}` -s ${PUBLIC} ; then
		echo "Private/Piblic key pair does not match"
	fi

	if [ ! -f ${PATH} ] ; then
		PATH_ERROR="Error: ${PATH} not a kernel module or binary efi image."
	fi

fi
